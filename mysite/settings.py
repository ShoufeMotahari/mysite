"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
import environ
import logging

# ŸÖÿ≥€åÿ± Ÿæÿ±Ÿà⁄òŸá
BASE_DIR = Path(__file__).resolve().parent.parent

# ÿÆŸàÿßŸÜÿØŸÜ ŸÅÿß€åŸÑ env
env = environ.Env()
env_path = os.path.join(BASE_DIR, '.env')
if os.path.exists(env_path):
    environ.Env.read_env(env_file=env_path)

AWS_ACCESS_KEY_ID = env("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = env("AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME")
AWS_S3_ENDPOINT_URL = env("AWS_S3_ENDPOINT_URL")
AWS_S3_REGION_NAME = env("AWS_S3_REGION_NAME", default="ir-thr-at1")  # Arvan Cloud region

# Storage configuration for newer Django versions
STORAGES = {
    'default': {
        'BACKEND': 'storages.backends.s3boto3.S3Boto3Storage',
    },
    'staticfiles': {
        'BACKEND': 'django.contrib.staticfiles.storage.StaticFilesStorage',
    },
}

AWS_S3_ADDRESSING_STYLE = "path"
AWS_DEFAULT_ACL = None
AWS_QUERYSTRING_AUTH = False
AWS_S3_FILE_OVERWRITE = False  # Don't overwrite files with same name
AWS_S3_CUSTOM_DOMAIN = None

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-%&r-xz_$%zjxpv6j5!7j77vo&_c_37p_=rzwc*w@v%)wy+976*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'accounts',
    'comments',
    'core',
    'sections',
    'dashboard',
    'users.apps.UsersConfig',
    'ckeditor',
    'ckeditor_uploader',
    'filemanager'
]
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'height': 300,
        'width': '100%',
        'extraPlugins': ','.join([
            'uploadimage',
            'div',
            'autolink',
            'autoembed',
            'embedsemantic',
            'autogrow',
            'widget',
            'lineutils',
            'clipboard',
            'dialog',
            'dialogui',
            'elementspath'
        ]),
    },
}

CKEDITOR_UPLOAD_PATH = "uploads/"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],  # ‚úÖ ŸæŸàÿ¥Ÿá templates ÿ≥ÿ±ÿßÿ≥ÿ±€å
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'fa-ir'

TIME_ZONE = 'Asia/Tehran'

USE_I18N = True
USE_L10N = False
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

BASE_DIR = Path(__file__).resolve().parent.parent

# üîπ Static files (CSS, JS, images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / 'static']
STATIC_ROOT = BASE_DIR / 'staticfiles'  # ÿ®ÿ±ÿß€å collectstatic ÿØÿ± ÿØ€åŸæŸÑŸà€å

# üî∏ Media files (user uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

AUTH_USER_MODEL = 'users.User'
SMS_API_KEY = env("SMS_API_KEY")
SMS_LINE_NUMBER = env("SMS_LINE_NUMBER")
SMS_TEMPLATE_ID = env("SMS_TEMPLATE_ID")

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'# smpt ÿ®ÿß€åÿØ ŸÅÿπÿßŸÑ ÿ®ÿ¥Ÿá ŸÅÿπŸÑÿß ÿ®ÿ±ÿß€å ÿ™ÿ≥ÿ™ ŸÖÿß ⁄©ÿØ Ÿæ€å€åŸÜ ÿ±ÿß ŸÖ€åÿ∞ÿßÿ±€åŸÖ
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# EMAIL_HOST = 'smtp.yourprovider.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'your@emails.com'
# Epython manage.py runserverMAIL_HOST_PASSWORD = 'yourpassword'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

SITE_URL = 'http://127.0.0.1:8000'  # ÿ®ÿ±ÿß€å ŸÑ€åŸÜ⁄© ŸÅÿπÿßŸÑ‚Äåÿ≥ÿßÿ≤€å

LOG_DIR = os.path.join(BASE_DIR, 'logs')  # ŸÖÿ≥€åÿ± ÿ∞ÿÆ€åÿ±Ÿá‚Äå€å ŸÅÿß€åŸÑ‚ÄåŸáÿß€å ŸÑÿß⁄Ø

if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)  # ÿß⁄Øÿ± ŸÅŸàŸÑÿØÿ± logs Ÿàÿ¨ŸàÿØ ŸÜÿØÿßÿ¥ÿ™ÿå ÿ®ÿ≥ÿßÿ≤

import os

LOG_DIR = os.path.join(BASE_DIR, 'logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,

    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} [{name}] {message}',
            'style': '{',
        },
    },

    'handlers': {
        'accounts_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'accounts.log'),
            'formatter': 'verbose',
        },
        'comments_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'comments.log'),
            'formatter': 'verbose',
        },
        'core_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'core.log'),
            'formatter': 'verbose',
        },
        'sections_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'sections.log'),
            'formatter': 'verbose',
        },
        'dashboard_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'dashboard.log'),
            'formatter': 'verbose',
        },
        'users_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'users.log'),
            'formatter': 'verbose',
        },
        'filemanager_file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_DIR, 'filemanager.log'),
            'formatter': 'verbose',
        }
    },

    'loggers': {
        'accounts': {
            'handlers': ['accounts_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'comments': {
            'handlers': ['comments_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'core': {
            'handlers': ['core_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'sections': {
            'handlers': ['sections_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'dashboard': {
            'handlers': ['dashboard_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'users': {
            'handlers': ['users_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'filemanager': {
            'handlers': ['filemanager_file'],
            'level': 'DEBUG',
            'propagate': False,
        },
    }
}
